{"version":3,"file":"static/js/415.02e1176b.chunk.js","mappings":"2MAKaA,EAAYC,EAAAA,GAAAA,IAAH,2GAMTC,EAAcD,EAAAA,GAAAA,IAAH,uHASXE,EAAYF,EAAAA,GAAAA,GAAH,0H,iBCctB,EA5BmB,SAAC,GAAc,IAAbG,EAAY,EAAZA,OACfC,GAAWC,EAAAA,EAAAA,MACTC,EAAS,SAAAC,GACb,OAAoB,OAAhBA,EACK,2CAEH,kCAAN,OAAyCA,EAC1C,EAEC,OACE,SAACR,EAAD,UACEI,EAAOK,KACP,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,cAAeC,EAAtC,EAAsCA,KAAMC,EAA5C,EAA4CA,MAAON,EAAnD,EAAmDA,YAAnD,OAEA,SAACN,EAAD,WACE,UAAC,KAAD,CAAMa,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMZ,GAA1C,WACA,gBACQa,IAAG,UAAKX,EAAOC,IACfW,IAAG,UAAKL,GAASH,GAAkBE,MAEzC,SAACV,EAAD,UAAYQ,GAAkBC,QANhBF,EAFlB,KAeC,C,yGCAP,UA7BY,WACV,OAA4CU,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,CAAC,OAApC,eAAOG,EAAP,KAAcC,EAAd,KAeI,OAbAC,EAAAA,EAAAA,YAAU,WACN,IACI,IAAMC,EAAiB,mCAAG,qGACHC,EAAAA,EAAAA,MADG,OAChBC,EADgB,OAEtBN,EAAkBM,EAAKC,SAFD,2CAAH,qDAIvBH,GAIH,CAFC,MAAOH,GACTC,EAASD,EACR,CACJ,GAAE,KAGH,4BACKA,GAASA,EAAMO,SAChB,2CAECT,IAAkB,SAAC,IAAD,CAAYjB,OAAQiB,MAKhD,C,8LC7BGU,EAAU,mCAGT,SAAeJ,IAAtB,4CAAO,OAAP,oBAAO,+FACCK,EAAS,CACbC,QAASF,EACTG,SAAU,SAHP,SAMkBC,EAAAA,EAAAA,IAAU,oBAAqB,CAAEH,OAAAA,IANnD,cAMCI,EAND,OAOCR,EAAOQ,EAASR,KAPjB,kBASEA,GATF,kEAYA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,kFACCN,EAAS,CACbC,QAASF,EACTG,SAAU,SAHP,SAMkBC,EAAAA,EAAAA,IAAA,iBAAoBG,GAAW,CAAEN,OAAAA,IANnD,cAMCI,EAND,OAOCR,EAAOQ,EAASR,KAPjB,kBASEA,GATF,kEAYA,SAAeW,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,kFACCR,EAAS,CACbC,QAASF,EACTG,SAAU,QACVO,MAAOD,GAJJ,SAOkBL,EAAAA,EAAAA,IAAA,gBAA2B,CAAEH,OAAAA,IAP/C,cAOCI,EAPD,OAQCR,EAAOQ,EAASR,KARjB,kBAUEA,GAVF,kEAaA,SAAec,EAAtB,+CAAO,OAAP,oBAAO,WAAyBJ,GAAzB,kFACCN,EAAS,CACbC,QAASF,EACTG,SAAU,SAHP,SAMkBC,EAAAA,EAAAA,IAAA,iBAAoBG,EAApB,YAAuC,CAAEN,OAAAA,IAN3D,cAMCI,EAND,OAOCR,EAAOQ,EAASR,KAPjB,kBASEA,GATF,kEAYA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAA4BL,GAA5B,kFACCN,EAAS,CACbC,QAASF,EACTG,SAAU,SAHP,SAMkBC,EAAAA,EAAAA,IAAA,iBAAoBG,EAApB,YAAuC,CAAEN,OAAAA,IAN3D,cAMCI,EAND,OAOCR,EAAOQ,EAASR,KAPjB,kBASEA,GATF,kEAnDPO,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/MoviesList/MovieList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/fetchApi.js"],"sourcesContent":["\nimport styled from 'styled-components';\n\n\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 300px);\n  gap: 16px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n  text-align: center;\n`;","import { useLocation } from \"react-router-dom\";\nimport { Container,  CardWrapper, MovieName,  } from \"./MovieList.styled\";\nimport { Link } from \"react-router-dom\";\n\n\n\nconst MoviesList = ({movies}) => {\nconst location = useLocation();\n  const poster = poster_path => {\n    if (poster_path === null) {\n      return 'https://via.placeholder.com/300sx450.jpg';\n    }\n    return `https://image.tmdb.org/t/p/w300${poster_path}`;\n  };\n\n    return(\n      <Container>\n       {movies.map(\n        ({ id, original_title, original_name, name, title, poster_path }) => (\n        \n        <CardWrapper key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n          <img\n                  src={`${poster(poster_path)}`}\n                  alt={`${title || original_title || name}`}\n                />\n            <MovieName>{original_title || original_name}</MovieName>\n          </Link>\n        </CardWrapper>\n        \n      ))}\n    </Container>\n    )\n        }\nexport default MoviesList;"," import { useEffect, useState } from 'react';\nimport {fetchTrendingMovies} from '../services/fetchApi';\nimport MoviesList from '../components/MoviesList/MoviesList';\n  \n const Home = () => {\n    const [trendingMovies, setTrendingMovies] = useState([]);\n    const [error, setError] = useState([null]);\n\n        useEffect(() =>{\n            try {\n                const getTrendingMovies = async() => {\n                    const data = await fetchTrendingMovies()\n                    setTrendingMovies(data.results)\n                }\n                getTrendingMovies()\n                \n            } catch (error) {\n            setError(error)\n            }\n        }, [])\n\n        return(\n        <main>\n            {error && error.message}\n            <h2>Trendin movies</h2>\n\n            {trendingMovies && <MoviesList movies={trendingMovies} />}\n\n        </main>\n            )\n      \n  };\n\n  export default Home;\n  ","import axios from 'axios';\n\nconst APY_KEY = '7ac9391c36294b15d48007ced829db82';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrendingMovies() {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n  };\n\n  const response = await axios.get('/trending/all/day', { params });\n  const data = response.data;\n\n  return data;\n}\n\nexport async function fetchMovieById(movieId) {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n  };\n\n  const response = await axios.get(`/movie/${movieId}`, { params });\n  const data = response.data;\n\n  return data;\n}\n\nexport async function fetchMovieByName(movieName) {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n    query: movieName,\n  };\n\n  const response = await axios.get(`/search/movie`, { params });\n  const data = response.data;\n\n  return data;\n}\n\nexport async function fetchCast(movieId) {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n  };\n\n  const response = await axios.get(`/movie/${movieId}/credits`, { params });\n  const data = response.data;\n\n  return data;\n}\n\nexport async function fetchReviews(movieId) {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n  };\n\n  const response = await axios.get(`/movie/${movieId}/reviews`, { params });\n  const data = response.data;\n\n  return data;\n}"],"names":["Container","styled","CardWrapper","MovieName","movies","location","useLocation","poster","poster_path","map","id","original_title","original_name","name","title","to","state","from","src","alt","useState","trendingMovies","setTrendingMovies","error","setError","useEffect","getTrendingMovies","fetchTrendingMovies","data","results","message","APY_KEY","params","api_key","language","axios","response","fetchMovieById","movieId","fetchMovieByName","movieName","query","fetchCast","fetchReviews"],"sourceRoot":""}